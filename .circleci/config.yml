version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  install-dependencies:
    description: Install project dependencies
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - checkout
      - restore_cache:
          keys: [<< parameters.project-name >>-build]
      - run:
          name: Install Dependencies
          command: |
            cd << parameters.project-name >>
            npm install
  
  test-project:
    description: Run project unit tests
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - run:
          name: Test project
          command: |
            cd << parameters.project-name >>
            npm run test 
  
  scan-project:
    description: Scan project dependencies for vulnerabilities
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - run:
          name: Test project
          command: |
            cd << parameters.project-name >>
            npm audit --audit-level=critical
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend-stack-name:
        description: Name of the backend CloudFormation stack
        type: string 
      frontend-stack-name:
        description: Name of the frontend CloudFormation stack
        type: string 
    steps:
      - run: 
          name: Destroy environment
          command: | 
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - run:
          name: Build front-end
          command: |
            cd frontend
            export API_URL="http://localhost:3030"
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - run:
          name: Build back-end
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - test-project:
          project-name: frontend
  
  test-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - test-project:
          project-name: backend 
           
  scan-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - scan-project:
          project-name: frontend
  
  scan-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - scan-project:
          project-name: backend
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`EC2InstanceDNS\`].Value" \
            --no-paginate \
            --output text \
            >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:
    docker:
      - image: python:3.7.6-alpine3.11
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: 
            - "13:ce:77:72:1e:ed:1b:a5:cd:11:a0:a0:3b:94:b6:b1"
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: c962f7a7-c112-413c-8d68-f2c441fba4ab" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum install -y tar gzip
      - install-dependencies:
          project-name: frontend
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`EC2InstanceDNS\`].Value" \
            --no-paginate \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            npm run build:prod
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]