version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend-stack-name:
        description: Name of the backend CloudFormation stack
        type: string 
      frontend-stack-name:
        description: Name of the frontend CloudFormation stack
        type: string 
    steps:
      - run: 
          name: Destroy environment
          when: on_fail
          command: | 
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: c962f7a7-c112-413c-8d68-f2c441fba4ab" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  

  install-dependencies:
    description: Install project dependencies
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - checkout
      - restore_cache:
          keys: [<< parameters.project-name >>-build]
      - run:
          name: Install Dependencies
          command: |
            cd << parameters.project-name >>
            npm install
  
  build-backend:
    description: Build Backend
    steps:
      - run:
          name: Build back-end
          command: |
            cd backend
            npm run build
  
  build-frontend:
    description: Build Frontend
    steps:
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build:prod
  
  test-project:
    description: Run project unit tests
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - run:
          name: Test project
          command: |
            cd << parameters.project-name >>
            npm run test 
  
  scan-project:
    description: Scan project dependencies for vulnerabilities
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - run:
          name: Test project
          command: |
            cd << parameters.project-name >>
            npm audit --audit-level=critical
  
  install-aws-cli:
    description: Install AWS CLI
    steps:
      - aws-cli/install
      - aws-cli/setup
  
  install-ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt-add-repository ppa:ansible/ansible
            sudo apt update
            sudo apt install -y ansible

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - run:
          name: Get backend url
          command: |
            export API_URL="http://localhost:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${localhost}:3030" >> frontend/.env
            cat frontend/.env
      - build-frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - build-backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - test-project:
          project-name: frontend
  
  test-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - test-project:
          project-name: backend 
           
  scan-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - scan-project:
          project-name: frontend
  
  scan-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - scan-project:
          project-name: backend
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`EC2InstanceDNS\`].Value" \
            --no-paginate \
            --output text \
            >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:   
    docker:
      - image: cimg/python:3.7
    steps:
      - install-aws-cli
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "13:ce:77:72:1e:ed:1b:a5:cd:11:a0:a0:3b:94:b6:b1"
      - attach_workspace:
          at: ~/
      - install-ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-aws-cli
      - install-dependencies:
          project-name: backend
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: c962f7a7-c112-413c-8d68-f2c441fba4ab" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-aws-cli
      - install-dependencies:
          project-name: frontend
      - run:
          name: Get backend URL
          command: |
            export BACKEND_IP=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`EC2InstanceDNS\`].Value" \
            --no-paginate \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - build-frontend
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build:prod
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-backend:
    docker:
      - image: cimg/python:3.7-node
    steps:
      - install-aws-cli
      - install-dependencies:
          project-name: backend
      - add_ssh_keys:
          fingerprints: 
            - "13:ce:77:72:1e:ed:1b:a5:cd:11:a0:a0:3b:94:b6:b1"
      - attach_workspace:
          at: ~/
      - install-ansible
      - run:
          name: Add .env file
          command: |
            echo "NODE_ENV=production" > backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
            
            cat backend/.env
      - build-backend
      - run:
          name: Zip directory
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Wait for Backend API to bootstrap
          command: sleep 60;
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`EC2InstanceDNS\`].Value" \
            --no-paginate \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]