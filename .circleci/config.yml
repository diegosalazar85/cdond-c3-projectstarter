version: 2.1

commands:
  install-dependencies:
    description: Install project dependencies
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - checkout
      - restore_cache:
          keys: [<< parameters.project-name >>-build]
      - run:
          name: Install Dependencies
          command: |
            cd << parameters.project-name >>
            npm install
  test-project:
    description: Run project unit tests
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - run:
          name: Test project
          command: |
            cd << parameters.project-name >>
            npm run test 
  scan-project:
    description: Scan project dependencies for vulnerabilities
    parameters:
      project-name:
        description: Project name
        type: string
    steps:
      - run:
          name: Test project
          command: |
            cd << parameters.project-name >>
            npm audit --audit-level=critical
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend-stack-name:
        description: Name of the backend CloudFormation stack
        type: string 
      frontend-stack-name:
        description: Name of the frontend CloudFormation stack
        type: string 
    steps:
      - run: 
          name: Destroy environment
          command: | 
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - run:
          name: Build front-end
          command: |
            cd frontend
            export API_URL="http://localhost:3030"
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - run:
          name: Build back-end
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - test-project:
          project-name: frontend
  test-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - test-project:
          project-name: backend          
  scan-frontend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: frontend
      - scan-project:
          project-name: frontend
  scan-backend:
    docker:
      - image: circleci/node:13.14.0
    steps:
      - install-dependencies:
          project-name: backend
      - scan-project:
          project-name: backend
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udapeople" \
              --output text \
              >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          backend-stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          frontend-stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]